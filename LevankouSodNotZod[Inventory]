package edu.cpt187.levankou.participation;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

public class Inventory 
{ // Open the brace of the Inventory class

	// Declare and initialize constants
	private final String[] DISCOUNT_NAMES = { "Member", "Senior", "No Discount" };
	private final double[] DISCOUNT_RATES = { 0.25, 0.15, 0.0 };
	private final String[] PRIZE_NAMES = {"Pork", "Cake", "Lime"};
	private final int MAX_RECORDS = 15;
	private final int NOT_FOUND = -1;
	private final int RESET_VALUE = 0;

	// Declare and initialize variables
	private int[] itemIDs = new int[MAX_RECORDS];
	private String[] itemNames = new String[MAX_RECORDS];
	private double[] itemPrices = new double[MAX_RECORDS];
	private int[] orderQuantity = new int[MAX_RECORDS];
	private double[] orderTotal = new double[MAX_RECORDS];
	private int[] inStockCounts = new int[MAX_RECORDS];
	private int itemSearchIndex = 0;
	private int recordCount = 0;

	// Declare and initialize the Random object
	private Random prizeGenerator = new Random();

	// Constructor
	public Inventory() 
	{ // Open the brace of constructor
	} // End the brace of constructor

	// Set method
	public void setReduceStock(int borrowedHowMany) 
	{ // Open the brace of the method
		inStockCounts[itemSearchIndex] = inStockCounts[itemSearchIndex] - borrowedHowMany;
	} // End the brace of the method

	// Set method
	public void setLoadItems(String borrowedFileName) 
	{ // Open the brace of the method
		recordCount = RESET_VALUE;
		try
		{ // Open the brace
			Scanner infile = new Scanner (new FileInputStream(borrowedFileName));
			while (infile.hasNext() == true && recordCount < MAX_RECORDS)
			{ // Open the while
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				inStockCounts[recordCount] = infile.nextInt();
				recordCount++;
			} // End of while
			infile.close();
			setBubbleSort();
		} // End of try
		catch (IOException ex)
		{ // Open a catch
			recordCount = NOT_FOUND;
		} // End of a catch
	} // End the brace of the method

	// Set method
	public void setLoadItems(String borrowedFileName, int borrowedSize) 
	{ // Open the brace of the method
		recordCount = RESET_VALUE;
		try
		{ // Open the brace
			Scanner infile = new Scanner (new FileInputStream(borrowedFileName));
			while (infile.hasNext() == true && recordCount < MAX_RECORDS && recordCount < borrowedSize)
			{ // Open the while
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				orderQuantity[recordCount] = infile.nextInt();
				orderTotal[recordCount] = infile.nextDouble();
				recordCount++;
			} // End of while
			infile.close();
			setBubbleSort();
		} // End of try
		catch (IOException ex)
		{ // Open a catch
			recordCount = NOT_FOUND;
		} // End of a catch
	} // End the brace of the method

	// Set method
	public void setSearchIndex(int borrowedID) 
	{ // Open the brace of the method
		itemSearchIndex = getSearchResults(borrowedID);
	} // End the brace of the method

	// Set method
	public void setBubbleSort() 
	{ // Open the brace of the method
		int LOCAL_CONSTANT_ONE = 1;
		int localLast = recordCount - LOCAL_CONSTANT_ONE;
		int localIndex = RESET_VALUE;
		boolean localSwap = false;
		while (localLast > RESET_VALUE) 
		{ // Open the while
			localIndex = RESET_VALUE;
			localSwap = false;
			while (localIndex < localLast) 
			{ // Open the while
				if (itemIDs[localIndex] > itemIDs[localIndex + LOCAL_CONSTANT_ONE]) 
				{ // Open the if
					setSwapArrayElements(localIndex);
					localSwap = true;
				} // End of if
				localIndex++;
			} // End of while
			if (localSwap == false) 
			{ // Open the if
				localLast = RESET_VALUE;
			} // End of if
			else 
			{ // Open the else
				localLast = localLast - LOCAL_CONSTANT_ONE;
			} // End of else
		} // End of while
	} // End of the method

	// Set method
	public void setSwapArrayElements(int borrowedIndex) 
	{ // Open the brace of the method
		int localItemIDs = 0;
		String localItemNames = "";
		double localItemPrices = 0.0;
		int localInStockCounts = 0;
		int localQuantity = 0;
		double localCost = 0.0;
		localItemIDs = itemIDs[borrowedIndex];
		itemIDs[borrowedIndex] = itemIDs[borrowedIndex + 1];
		itemIDs[borrowedIndex + 1] = localItemIDs;
		localItemNames = itemNames[borrowedIndex];
		itemNames[borrowedIndex] = itemNames[borrowedIndex+1];
		itemNames[borrowedIndex + 1] = localItemNames;
		localItemPrices = itemPrices[borrowedIndex];
		itemPrices[borrowedIndex] = itemPrices[borrowedIndex+1];
		itemPrices[borrowedIndex + 1] = localItemPrices;
		localInStockCounts = inStockCounts[borrowedIndex];
		inStockCounts[borrowedIndex] = inStockCounts[borrowedIndex+1];
		inStockCounts[borrowedIndex + 1] = localInStockCounts;
		localQuantity = orderQuantity[borrowedIndex];
		orderQuantity[borrowedIndex] = orderQuantity[borrowedIndex + 1];
		orderQuantity[borrowedIndex + 1] = localQuantity;
		localCost = orderTotal[borrowedIndex];
		orderTotal[borrowedIndex] = orderTotal[borrowedIndex + 1];
		orderTotal[borrowedIndex + 1] = localCost;
	} // End the brace of the method

	// Get method
	public int[] getInStockCounts() 
	{ // Open the brace of the method
		return inStockCounts;
	} // End the brace of the method

	public int[] getItemIDs() 
	{ // Open the brace of the method
		return itemIDs;
	} // End the brace of the method

	// Get method
	public String[] getItemNames() 
	{ // Open the brace of the method
		return itemNames;
	} // End the brace of the method

	// Get method
	public double[] getItemPrices() 
	{ // Open the brace of the method
		return itemPrices;
	} // End the brace of the method

	// Get method
	public String[] getDiscountNames() 
	{ // Open the brace of the method
		return DISCOUNT_NAMES;
	} // End the brace of the method

	// Get method
	public double[] getDiscountRates() 
	{ // Open the brace of the method
		return DISCOUNT_RATES;
	} // End the brace of the method

	// Get method
	public int[] getOrderQuantities() 
	{ // Open the brace of the method
		return orderQuantity;
	} // End the brace of the method

	// Get method
	public double[] getOrderTotals() 
	{ // Open the brace of the method
		return orderTotal;
	} // End the brace of the method

	// Get method
	public String[] getPrizeNames() 
	{ // Open the brace of the method
		return PRIZE_NAMES;
	} // End the brace of the method

	// Get method
	public int getRandomNumber() 
	{ // Open the brace of the method
		return prizeGenerator.nextInt(PRIZE_NAMES.length);
	} // End the brace of the method

	// Get method
	public int getMaxRecords() 
	{ // Open the brace of the method
		return MAX_RECORDS;
	} // End the brace of the method

	// Get method
	public int getItemSearchIndex() 
	{ // Open the brace of the method
		return itemSearchIndex;
	} // End the brace of the method

	// Get method
	public int getRecordCount() 
	{ // Open the brace of the method
		return recordCount;
	} // End the brace of the method

	// Get method
	public double getGrandTotal() 
	{ // Open the brace of the method
		double localGrandTotal = 0.0;
		int localIndex = 0;
		while (localIndex < orderTotal.length)
		{ // Open the while
			localGrandTotal = orderTotal[localIndex] + localGrandTotal;
			localIndex++;
		} // End of while
		return localGrandTotal;
	} // End the brace of the method

	// Get method
	public int getSearchResults(int borrowedBorrowedID)
	{ // Open the brace of the method
		int LOCAL_CONSTANT_TWO = 2;
		int LOCAL_CONSTANT_ONE = 1;
		int localFirst = RESET_VALUE;
		int localMid = RESET_VALUE;
		int localLast = recordCount - LOCAL_CONSTANT_ONE;
		boolean localFound = false;
		while(localFirst <= localLast && localFound == false)
		{ // Open the while
			localMid = (localFirst + localLast) / LOCAL_CONSTANT_TWO;
			if (itemIDs[localMid] == borrowedBorrowedID)
			{ // Open the if
				localFound = true;
			} // End of if
			else
			{ // Open the else
				if (itemIDs[localMid] < borrowedBorrowedID)
				{ // Open the if
					localFirst = localMid + LOCAL_CONSTANT_ONE;
				} // End of if
				else
				{ // Open the else
					localLast = localMid - LOCAL_CONSTANT_ONE;
				} // End of else
			} // End of else
		} // End of while
		if (localFound == false)
		{ // Open the if
			localMid = NOT_FOUND;
		} // End of if
		return localMid;
	} // End the brace of the method

} // End the brace of the Inventory class
